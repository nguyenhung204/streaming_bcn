services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: livestream_mongodb
    ports:
      - "${MONGODB_PORT:-27017}:27017"
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE:-stream_socket}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-admin123}
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    restart: unless-stopped
    networks:
      - app-network
    command: mongod --auth
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Init Service - Setup data and admin user  
  init:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: livestream_init
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD:-admin123}@mongodb:27017/stream_socket?authSource=admin
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    command: ["./scripts/docker-init.sh"]
    restart: "no"  # Init service should only run once

  # NestJS Application (Direct access without nginx)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: livestream_app
    ports:
      - "127.0.0.1:3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGODB_URI=mongodb://${MONGODB_ROOT_USER:-admin}:${MONGODB_ROOT_PASSWORD:-admin123}@mongodb:27017/stream_socket?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - app_logs:/app/logs
    command: ["node", "./dist/main.js"]
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  app_logs:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
